Info Services Azure Devops
https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/

Azure Boards - Plan Track
*Jerarquia
https://docs.microsoft.com/en-us/azure/devops/boards/get-started/plan-track-work?view=azure-devops&tabs=agile-process


*Integration with slack
*Azure AD Integration - Azure


**Add user to Azure DevOps project

Five users who get Basic features, such as version control, tools for Agile, Java, build, release, and more.

Unlimited users who get Stakeholder who also get Basic features.
Additional features, such as working with your backlog, work items, and queries

Unlimited Visual Studio subscribers who also get Basic features. Addutional features, such as Azure Test Plans,
can be assigned to users by access level, Basic + Test Plans

Permissions of Project Contributors, the default security group for users who contribute to your project


*Permissions in Azure DevOps

-----
Query in Azure Boards
    Field[Work Item Type],  Operator[=], Value[Task]
And  Field[state],  Operator[=], Value[New]

Chart
Name[query-chart]
Group by [Assigned to]
Columns

"ok"

Add to Dashboard

----
query tags contains az-1000

----------
----------
Dashboard-> edit -> Add widget
Burndown
 burndown chart, so this helps you to actually see on the amount of remaining work that you have within a specified period of time.  
[cantidad de trabajo restante que tiene dentro de un período de tiempo específico.]

Use the burndown chart to track completion of a predefined scope of work over a predefined period of time. For example, a sprint burndown tracks the sprint backlog completion by end of the sprint. A release burndown tracks the release backlog completion by the end of the release. You can define a bug burndown chart to track completion of a set of bugs by a certain date.

Burnup:
Configuring the Burnup widget is exactly like configuring the Burndown widget, except that it plots work completed, rather than work remaining.
Burnup es exactamente como configurar el widget Burndown, excepto que traza el trabajo completado, en lugar del trabajo restante.

Chart for Work Items
Visualize work items bugs, user stories, and features using shared work item queries
The helps to see the items as they move through the differents states
Ayuda a ver los elementos a medida que se mueven por los diferentes estados.



Camulative Flow Diagram (CFD)
Visualize the follow of work and identify bottlenecks in the software development process
Visualizar el seguimiento del trabajo e identificar cuellos de botella en el proceso de desarrollo de software.

Cycle Time
Visualize and Analyze your team's cycle time using a control chart
Measure the time taken for the team to complete work items once they have been actively working on them
Mide el tiempo que tarda el equipo en completar los elementos de trabajo una vez que han estado trabajando activamente en ellos

Lead Time
So this measures the total time that has elapsed from the creation of the work item
onto their completion
Visualize and analyze your team's lead time using a control chart

Measures the total time elapsed from the creation of work items to their completion
Mide el tiempo total transcurrido desde la creación de elementos de trabajo hasta su finalización


=======================
Version Control
Centralized System:
The main branch or your code files is basically present on a version control server then when any developer wants to go ahead and actually make a change onto a particular file, they would first go ahead and actually check out the file from the server.

---
Git - Decentralized System
https://git-scm.com/downloads

git log
Yo can see the date, the commitment was made 
and this is traking id basically the commit number

git diff

:q for exit;
:h for help;

git checkout <id>

https://es.stackoverflow.com/questions/41489/volver-a-commit-anterior
git reset --hard HEAD~3

****
GitHub
Renaming the default branch of our own repositories from master to main
https://github.com/github/renaming

git branch -m master main


//git status -> git commit -m    -> git log  //to see HEAD
//git push origin main  -> git log  //see again HEAD


*Merge - Fast Forward
git checkout main
git merge development

git log
git log --graph

git pull --all
git branch --unset-upstream


**squash
https://docs.microsoft.com/en-us/azure/devops/repos/git/merging-with-squash?view=azure-devops
git merge --squash bugfix
This will take all the commits from the bugfix branch, squash them into 1 commit, and merge it with your master branch.

git push --all origin


*pull request
-Branches Polices



*****
Visual Studio - Source Control - Github, Azure Repos
.gitignore

TFVC -Team Foundation Version Control


**
Integration Github and Azure Boards Integration
repo github
 - settings - integrations

example closed task with commit en github


*fork repository

---Git Credential, Administrador de credenciales de windows


Git gc command
git prune command 
https://git-scm.com/docs/git-gc
https://git-scm.com/docs/git-prune


-------
Continuous Integration
MSBuild  .Net framework
.Net Core CLI .Net Core framework

trigger, pipeline[build, test, deploy]

build(jobs->this is used to represent an execution boundary for a series of steps)
A stage can consist of multiple jobs

------
Azure pipelines - , 
you won't see this virtual machine
it'll be running in the background, as part of Azure pipelines,
and then it will actually go ahead and carry out that build process.

Agent
This agent will actually go ahead and run all of the jobs, the steps, the scripts and the tasks that
you actually specify as part of Azure pipelines and when it comes to the type of virtual machine which
is being spun up.

Azure Pipeline
Pipeline is going to be part of an existing git repository.

Remember when we define the pipeline using Azure pipeline.
wizard, we went ahead and choose a git repository in Azure repose
So now it's going to go ahead
And, you know, this Azure pipelines dot yaml file is now going to be version controlled as, part
of a git repository.

--
yaml file:

pool:
  vmImage: 'ubuntu-latest'
 
steps:
- bash: echo "Our First Pipeline"


---
pool:
  vmImage: 'ubuntu-latest'
 
jobs:
- job: Firstjob
  timeoutInMinutes: 10
  steps:
  - bash: echo "The First job"
 
- job: Secondjob
  steps:
  - bash: echo "Our Second Pipeline"

https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=azure-devops
.net core
task1
when it comes to Dotnet, when it comes to packages, all of it is managed by Nuget.

Now, this task is nothing but an inbuilt task that is defined in Azure pipelines by the meaning of
@ one.
It is basically the version number for this particular task.
So when this, Azure pipeline runs, when it goes on to this particular task, this task will tell

task2
 is

to go ahead and restore all of the nuget packages.

task3 Build
task4 testunit

--
# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
 
trigger:
- master
 
pool:
  vmImage: 'windows-latest'
 
variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
 
steps:
- task: NuGetToolInstaller@1
 
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
 
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'


*trigger

pipeline for Github repo
--

**Microsoft hosted agents
vm in azure
download agent self
personal access token


pipeline:
replace vmImage: 'agentvm'

------------------
Jenkins
***lesson:view Jenkins- Setup 
vm in azure - server manager
install java developer kit
install Jenkins - 
 - view Local Security Policy in vm [Local Polices, User Rights Assignment] - add user or group

***lesson:Installing the required components
install git, nuget.exe, vs
plugin jenkins - MSBuild
path to git, MSBuild

-----
jenkins - project pipeline - execute windows batch command

workspace: ruta del workspace en jenkins
D:\nuget.exe restore \workspace\app-project\pipeline.sln

D:\nuget.exe restore "C:\Users\demousr\AppData\Local\Jenkins.jenkins\workspace\app-project\pipeline.sln"

Build a Visual Studio project or solution using MSBuild


#Download .net core sdk
#restart vm


--
azure repos - jenkins
generate credentials in azure repos

---
*Lesson Jenkins - Azure Repos - Continuous Integration
port 8080 
vm azure - Networking - Add inbound port rule

vm machine - windows firewall - advanced settings - inbaund rules - add rule
   protocol  type: TCP
	     local port 8080


jenkins - people - admin - configure - Api token

go to azure devops - Project Settings: Service hooks
add service - jenkins - trigger:Code pushed, repository:[name]
			jenkins base url, user, token